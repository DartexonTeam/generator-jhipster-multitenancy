<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

import React from 'react';
import { connect } from 'react-redux';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, Row, Col, Label } from 'reactstrap';
import { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';
import { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IRootState } from 'app/shared/reducers';

import { I<%= tenantNameUpperFirst %> } from 'app/shared/model/<%= tenantNameLowerFirst %>.model';
import { getEntities as get<%= tenantNamePluralUpperFirst %> } from 'app/entities/<%= tenantNameLowerFirst %>/<%= tenantNameLowerFirst %>.reducer';
import { getEntity, updateEntity, createEntity, reset } from './blog.reducer';
import { IBlog } from 'app/shared/model/blog.model';
import { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';
import { mapIdList } from 'app/shared/util/entity-utils';
import { hasAnyAuthority } from 'app/shared/auth/private-route';
import { AUTHORITIES } from 'app/config/constants';
import { getSession } from 'app/shared/reducers/authentication';
import { getProfile } from 'app/shared/reducers/application-profile';

export interface IBlogUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}

export interface IBlogUpdateState {
  isNew: boolean;
  companyId: string;
}

export class BlogUpdate extends React.Component<IBlogUpdateProps, IBlogUpdateState> {
  constructor(props) {
    super(props);
    this.state = {
      companyId: '0',
      isNew: !this.props.match.params || !this.props.match.params.id
    };
  }

  componentWillUpdate(nextProps, nextState) {
    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {
      this.handleClose();
    }
  }

  componentDidMount() {
    if (this.state.isNew) {
      this.props.reset();
    } else {
      this.props.getEntity(this.props.match.params.id);
    }
      this.props.getSession();
      this.props.getProfile();
      if (!this.props.account.<%= tenantNameLowerFirst %>) {
        this.props.get<%= tenantNamePluralUpperFirst %>();
      }
  }

  saveEntity = (event, errors, values) => {
    if (errors.length === 0) {
      const { blogEntity } = this.props;
      const entity = {
        ...blogEntity,
        ...values
      };

      if (this.state.isNew) {
        this.props.createEntity(entity);
      } else {
        this.props.updateEntity(entity);
      }
    }
  };

  handleClose = () => {
    this.props.history.push('/entity/blog');
  };

  render() {
    const { blogEntity, <%= tenantNamePluralLowerFirst %>, loading, updating } = this.props;
    const { isNew } = this.state;

    return (
      <div>
        <Row className="justify-content-center">
          <Col md="8">
            <h2 id="jhipsterApp.blog.home.createOrEditLabel">
              <Translate contentKey="jhipsterApp.blog.home.createOrEditLabel">Create or edit a Blog</Translate>
            </h2>
          </Col>
        </Row>
        <Row className="justify-content-center">
          <Col md="8">
            {loading ? (
              <p>Loading...</p>
            ) : (
              <AvForm model={isNew ? {} : blogEntity} onSubmit={this.saveEntity}>
                {!isNew ? (
                  <AvGroup>
                    <Label for="blog-id">
                      <Translate contentKey="global.field.id">ID</Translate>
                    </Label>
                    <AvInput id="blog-id" type="text" className="form-control" name="id" required readOnly />
                  </AvGroup>
                ) : null}
                <AvGroup>
                  <Label id="nameLabel" for="blog-name">
                    <Translate contentKey="jhipsterApp.blog.name">Name</Translate>
                  </Label>
                  <AvField id="blog-name" type="text" name="name" />
                </AvGroup>
                <AvGroup>
                  <Label for="blog-<%= tenantNameLowerFirst %>">
                    <Translate contentKey="jhipsterApp.blog.company"><%= tenantNameUpperFirst %></Translate>
                  </Label>
                  {this.props.isAdmin ? <AvInput
                    id="blog-<%= tenantNameLowerFirst %>"
                    type="select"
                    className="form-control"
                    name="<%= tenantNameLowerFirst %>.id"
                    value={isNew ? <%= tenantNamePluralLowerFirst %>[0] && <%= tenantNamePluralLowerFirst %>[0].id : blogEntity.<%= tenantNameLowerFirst %>.id}
                    required
                  >
                    {<%= tenantNamePluralLowerFirst %>
                      ? <%= tenantNamePluralLowerFirst %>.map(otherEntity => (
                          <option value={otherEntity.id} key={otherEntity.id}>
                            {otherEntity.name}
                          </option>
                        ))
                      : null}
                  </AvInput> : <AvInput
                  id="blog-company"
                  type="select"
                  className="form-control"
                  name="company.id"
                  value={isNew ? <%= tenantNamePluralLowerFirst %>[0] && <%= tenantNamePluralLowerFirst %>[0].id : blogEntity.<%= tenantNameLowerFirst %>.id}
                  required>{this.props.account.<%= tenantNameLowerFirst %> ? <option value={this.props.account.<%= tenantNameLowerFirst %>.id}>{this.props.account.<%= tenantNameLowerFirst %>.name} </option> : null}</AvInput>}
                  <AvFeedback>
                    <Translate contentKey="entity.validation.required">This field is required.</Translate>
                  </AvFeedback>
                </AvGroup>
                <Button tag={Link} id="cancel-save" to="/entity/blog" replace color="info">
                  <FontAwesomeIcon icon="arrow-left" />
                  &nbsp;
                  <span className="d-none d-md-inline">
                    <Translate contentKey="entity.action.back">Back</Translate>
                  </span>
                </Button>
                &nbsp;
                <Button color="primary" id="save-entity" type="submit" disabled={updating}>
                  <FontAwesomeIcon icon="save" />
                  &nbsp;
                  <Translate contentKey="entity.action.save">Save</Translate>
                </Button>
              </AvForm>
            )}
          </Col>
        </Row>
      </div>
    );
  }
}

const mapStateToProps = (storeState: IRootState) => ({
  companies: storeState.company.entities,
  isAdmin: hasAnyAuthority(storeState.authentication.account.authorities, [AUTHORITIES.ADMIN]),
  account: storeState.authentication.account,
  blogEntity: storeState.blog.entity,
  loading: storeState.blog.loading,
  updating: storeState.blog.updating,
  updateSuccess: storeState.blog.updateSuccess
});

const mapDispatchToProps = {
  getCompanies,
  getProfile,
  getSession,
  getEntity,
  updateEntity,
  createEntity,
  reset
};

type StateProps = ReturnType<typeof mapStateToProps>;
type DispatchProps = typeof mapDispatchToProps;

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(BlogUpdate);
